h1. Cellar Kubernetes discovery

h2. Kubernetes

Kubernetes (http://kubernetes.io) is an open source orchestration system for Docker containers. It handles scheduling
onto nodes in a compute cluster and actively manages workloads to ensure that their state matches the users declared
intentions.
Using the concepts of "labels", "pods", "replicationControllers" and "services", it groups the containers which make up
 an application into logical units for easy management and discovery.

Following the aforementioned concept will most likely change how you package and provision your Karaf-based applications.
For instance, you will eventually have to provide a Docker image with a pre-configured Karaf, KAR files in deployment
folder, etc. so that your Kubernetes container may bootstrap everything on boot.

h2. Cellar in Kubernetes

Cellar relies on Hazelcast (http://www.hazelcast.com) in order to discover cluster nodes. This can happen either by using
multicast or unicast (specifying the IP address of each node) discovery.
Unfortunately, multicast traffic is blocked on most IaaS providers, hence it's blocked on Kubernetes clusters, as well.
The alternative is to specify each available node IP address beforehand, and only then start Cellar.
This creates configuration and maintenance difficulties, especially since in most cases the addresses are not known in
advance.
Also, it defeats scalability - remember that in Kubernetes containers (pods) can come and go and the only assurance
you will have is that the cluster will try to have at all times the number of containers you specified.

Cellar solves this problem by using a Kubernetes discovery service.

h2. Kubernetes discovery service

In order to determine the IP address of each node, so that Hazelcast can connect to them, the Kubernetes discovery service
queries the Kubernetes API for containers labeled with the <i>pod.label.key</i> and <i>pod.label.key</i> specified
in <i>etc/org.apache.karaf.cellar.kubernetes.cfg</i>. So, you <strong>must be sure</strong> to label your containers (pods)
accordingly.1

NOTE: All containers in a Kubernetes cluster can access said API at http://<strong>$KUBERNETES_RO_SERVICE_HOST</strong>:<strong>$KUBERNETES_RO_SERVICE_PORT</strong>,
since environment variables are injected into all Kubernetes containers)

After a Cellar node starts up, Kubernetes discovery service will configure Hazelcast with currently running Cellar nodes.
Since Hazelcast follows a peer-to-peer all-shared topology, whenever nodes come up and down, the cluster will remain
up-to-date.

h2. Installing Kubernetes discovery service

To install the Kubernetes discovery service, simply install cellar-kubernetes feature.

{code}
karaf@root()> feature:install cellar-kubernetes
{code}

Once the feature is installed, a new configuration file for the Kubernetes discovery service will live in
<i>etc/org.apache.karaf.cellar.kubernetes.cfg</i> with the following contents:

{code}
#
# Label selector used to idenfity Cellar nodes in Kubernetes cluster
#
pod.label.key = name
pod.label.value = cellar
{code}

In case you change the file, the discovery service will check again for new nodes. If new nodes are found, Hazelcast configuration will be updated and the instance restarted.